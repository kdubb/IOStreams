{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/init(operation:algorithm:key:boxdatasize:)","title":"init(operation: BoxCipherFilter.Operation, algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/key","title":"let key: SymmetricKey","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/finish()","title":"func finish() throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/process(data:)","title":"func process(data: Data) throws -> Data","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/noncesize","title":"static let nonceSize: Int","type":"property"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/tagsize","title":"static let tagSize: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/sealedboxsize(datasize:)","title":"static func sealedBoxSize(dataSize: Int) -> Int","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/algorithm\/aesgcm","title":"case aesGcm","type":"case"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/algorithm\/chacha20poly","title":"case chaCha20Poly","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/algorithm\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/iostreams\/boxcipherfilter\/algorithm\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/boxcipherfilter\/algorithm","title":"BoxCipherFilter.Algorithm","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/operation\/open","title":"case open","type":"case"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/operation\/seal","title":"case seal","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/iostreams\/boxcipherfilter\/operation\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/iostreams\/boxcipherfilter\/operation\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/boxcipherfilter\/operation","title":"BoxCipherFilter.Operation","type":"enum"}],"path":"\/documentation\/iostreams\/boxcipherfilter","title":"BoxCipherFilter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsink\/init(sink:segmentsize:)","title":"init(sink: Sink, segmentSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsink\/byteswritten","title":"var bytesWritten: Int","type":"property"},{"path":"\/documentation\/iostreams\/bufferedsink\/segmentsize-swift.property","title":"let segmentSize: Int","type":"property"},{"path":"\/documentation\/iostreams\/bufferedsink\/sink","title":"let sink: Sink","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsink\/close()","title":"func close() async throws","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/flush()","title":"func flush() async throws","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/write(data:)","title":"func write(data: Data) async throws","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsink\/segmentsize-swift.type.property","title":"static let segmentSize: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsink\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/filtering(using:)","title":"func filtering(using: Filter) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsink\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"}],"path":"\/documentation\/iostreams\/bufferedsink\/sink-implementations","title":"Sink Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/bufferedsink","title":"BufferedSink","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsource\/init(source:segmentsize:)","title":"init(source: Source, segmentSize: Int)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsource\/bytesread","title":"var bytesRead: Int","type":"property"},{"path":"\/documentation\/iostreams\/bufferedsource\/segmentsize-swift.property","title":"let segmentSize: Int","type":"property"},{"path":"\/documentation\/iostreams\/bufferedsource\/source","title":"let source: Source","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsource\/close()","title":"func close() async throws","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/read(max:)","title":"func read(max: Int) async throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/read(next:)","title":"func read(next: Int) async throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/require(count:)","title":"func require(count: Int) async throws -> Bool","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsource\/segmentsize-swift.type.property","title":"static let segmentSize: Int","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/bufferedsource\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/buffers(size:)","title":"func buffers(size: Int) -> AsyncBuffers","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/filtering(using:)","title":"func filtering(using: Filter) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/pipe(to:buffersize:)","title":"func pipe(to: Sink, bufferSize: Int) async throws","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/read(exactly:)","title":"func read(exactly: Int) async throws -> Data","type":"method"},{"path":"\/documentation\/iostreams\/bufferedsource\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"}],"path":"\/documentation\/iostreams\/bufferedsource\/source-implementations","title":"Source Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/bufferedsource","title":"BufferedSource","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/compressionfilter\/init(operation:algorithm:)","title":"init(operation: FilterOperation, algorithm: Algorithm) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/compressionfilter\/finish()","title":"func finish() throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/compressionfilter\/process(data:)","title":"func process(data: Data) throws -> Data","type":"method"}],"path":"\/documentation\/iostreams\/compressionfilter","title":"CompressionFilter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/datasink\/init(data:)","title":"init(data: Data)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/datasink\/byteswritten","title":"var bytesWritten: Int","type":"property"},{"path":"\/documentation\/iostreams\/datasink\/data","title":"var data: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/datasink\/close()","title":"func close()","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/write(data:)","title":"func write(data: Data) throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/datasink\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/filtering(using:)","title":"func filtering(using: Filter) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/datasink\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"}],"path":"\/documentation\/iostreams\/datasink\/sink-implementations","title":"Sink Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/datasink","title":"DataSink","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/datasource\/init(data:)","title":"init(data: Data)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/datasource\/bytesread","title":"var bytesRead: Int","type":"property"},{"path":"\/documentation\/iostreams\/datasource\/data","title":"var data: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/datasource\/close()","title":"func close()","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/read(max:)","title":"func read(max: Int) throws -> Data?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/datasource\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/buffers(size:)","title":"func buffers(size: Int) -> AsyncBuffers","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/filtering(using:)","title":"func filtering(using: Filter) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/pipe(to:buffersize:)","title":"func pipe(to: Sink, bufferSize: Int) async throws","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/read(exactly:)","title":"func read(exactly: Int) async throws -> Data","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/read(next:)","title":"func read(next: Int) async throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/datasource\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"}],"path":"\/documentation\/iostreams\/datasource\/source-implementations","title":"Source Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/datasource","title":"DataSource","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filesink\/init(path:)","title":"convenience init(path: String) throws","type":"init"},{"path":"\/documentation\/iostreams\/filesink\/init(url:)","title":"convenience init(url: URL) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filesink\/byteswritten","title":"var bytesWritten: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filesink\/write(data:)","title":"func write(data: Data) async throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filesink\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filesink\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filesink\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/filesink\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filesink\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filesink\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filesink\/filtering(using:)","title":"func filtering(using: Filter) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filesink\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/filesink\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filesink\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"}],"path":"\/documentation\/iostreams\/filesink\/sink-implementations","title":"Sink Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/filesink","title":"FileSink","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filesource\/init(path:)","title":"convenience init(path: String) throws","type":"init"},{"path":"\/documentation\/iostreams\/filesource\/init(url:)","title":"convenience init(url: URL) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filesource\/bytesread","title":"var bytesRead: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filesource\/read(max:)","title":"func read(max: Int) async throws -> Data?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filesource\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/buffers(size:)","title":"func buffers(size: Int) -> AsyncBuffers","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/filtering(using:)","title":"func filtering(using: Filter) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/pipe(to:buffersize:)","title":"func pipe(to: Sink, bufferSize: Int) async throws","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/read(exactly:)","title":"func read(exactly: Int) async throws -> Data","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/read(next:)","title":"func read(next: Int) async throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/filesource\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"}],"path":"\/documentation\/iostreams\/filesource\/source-implementations","title":"Source Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/filesource","title":"FileSource","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filestream\/init(filehandle:)","title":"init(fileHandle: FileHandle) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filestream\/close()","title":"func close() throws","type":"method"}],"path":"\/documentation\/iostreams\/filestream","title":"FileStream","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filtersink\/init(sink:filter:)","title":"init(sink: Sink, filter: Filter)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filtersink\/byteswritten","title":"var bytesWritten: Int","type":"property"},{"path":"\/documentation\/iostreams\/filtersink\/sink","title":"var sink: Sink","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filtersink\/close()","title":"func close() async throws","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/write(data:)","title":"func write(data: Data) async throws","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filtersink\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/filtering(using:)","title":"func filtering(using: Filter) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/filtersink\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"}],"path":"\/documentation\/iostreams\/filtersink\/sink-implementations","title":"Sink Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/filtersink","title":"FilterSink","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filtersource\/init(source:filter:)","title":"init(source: Source, filter: Filter)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filtersource\/bytesread","title":"var bytesRead: Int","type":"property"},{"path":"\/documentation\/iostreams\/filtersource\/source","title":"var source: Source","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filtersource\/close()","title":"func close() async throws","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/read(max:)","title":"func read(max: Int) async throws -> Data?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filtersource\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/buffers(size:)","title":"func buffers(size: Int) -> AsyncBuffers","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/filtering(using:)","title":"func filtering(using: Filter) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/pipe(to:buffersize:)","title":"func pipe(to: Sink, bufferSize: Int) async throws","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/read(exactly:)","title":"func read(exactly: Int) async throws -> Data","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/read(next:)","title":"func read(next: Int) async throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/filtersource\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"}],"path":"\/documentation\/iostreams\/filtersource\/source-implementations","title":"Source Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/filtersource","title":"FilterSource","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hmacfilter\/init(algorithm:key:)","title":"init(algorithm: HMACFilter.Algorithm, key: SymmetricKey)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hmacfilter\/digest","title":"var digest: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hmacfilter\/finish()","title":"func finish() throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/hmacfilter\/process(data:)","title":"func process(data: Data) throws -> Data","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hmacfilter\/algorithm","title":"HMACFilter.Algorithm","type":"typealias"}],"path":"\/documentation\/iostreams\/hmacfilter","title":"HMACFilter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hashingfilter\/init(algorithm:)","title":"init(algorithm: HashingFilter.Algorithm)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hashingfilter\/digest","title":"var digest: Data","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hashingfilter\/finish()","title":"func finish() async throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/hashingfilter\/process(data:)","title":"func process(data: Data) -> Data","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hashingfilter\/algorithm\/md5","title":"case md5","type":"case"},{"path":"\/documentation\/iostreams\/hashingfilter\/algorithm\/sha1","title":"case sha1","type":"case"},{"path":"\/documentation\/iostreams\/hashingfilter\/algorithm\/sha256","title":"case sha256","type":"case"},{"path":"\/documentation\/iostreams\/hashingfilter\/algorithm\/sha384","title":"case sha384","type":"case"},{"path":"\/documentation\/iostreams\/hashingfilter\/algorithm\/sha512","title":"case sha512","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hashingfilter\/algorithm\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/iostreams\/hashingfilter\/algorithm\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/hashingfilter\/algorithm","title":"HashingFilter.Algorithm","type":"enum"}],"path":"\/documentation\/iostreams\/hashingfilter","title":"HashingFilter","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/init(request:session:bufferingpolicy:)","title":"init(request: URLRequest, session: URLSession, bufferingPolicy: URLSessionSource.Stream.Continuation.BufferingPolicy)","type":"init"},{"path":"\/documentation\/iostreams\/urlsessionsource\/init(url:session:)","title":"convenience init(url: URL, session: URLSession)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/bytesread","title":"var bytesRead: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/close()","title":"func close() async throws","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/read(max:)","title":"func read(max: Int) async throws -> Data?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/stream","title":"URLSessionSource.Stream","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/invalidresponse","title":"case invalidResponse","type":"case"},{"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/invalidstatus","title":"case invalidStatus","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/errordescription-1qi2x","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/errordescription-7c1cn","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/iostreams\/urlsessionsource\/httperror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/urlsessionsource\/httperror","title":"URLSessionSource.HTTPError","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/urlsessionsource\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/buffers(size:)","title":"func buffers(size: Int) -> AsyncBuffers","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/filtering(using:)","title":"func filtering(using: Filter) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/pipe(to:buffersize:)","title":"func pipe(to: Sink, bufferSize: Int) async throws","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/read(exactly:)","title":"func read(exactly: Int) async throws -> Data","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/read(next:)","title":"func read(next: Int) async throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/urlsessionsource\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"}],"path":"\/documentation\/iostreams\/urlsessionsource\/source-implementations","title":"Source Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/urlsessionsource","title":"URLSessionSource","type":"class"},{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/filter\/finish()","title":"func finish() async throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/filter\/process(data:)","title":"func process(data: Data) async throws -> Data","type":"method"}],"path":"\/documentation\/iostreams\/filter","title":"Filter","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/flushable\/flush()","title":"func flush() async throws","type":"method"}],"path":"\/documentation\/iostreams\/flushable","title":"Flushable","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/hashingresult\/digest","title":"var digest: Data","type":"property"}],"path":"\/documentation\/iostreams\/hashingresult","title":"HashingResult","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/sink\/byteswritten","title":"var bytesWritten: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/sink\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/sink\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/sink\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/sink\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/sink\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/sink\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/sink\/filtering(using:)","title":"func filtering(using: Filter) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/sink\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Sink, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/sink\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/sink\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Sink","type":"method"},{"path":"\/documentation\/iostreams\/sink\/write(data:)","title":"func write(data: Data) async throws","type":"method"}],"path":"\/documentation\/iostreams\/sink","title":"Sink","type":"protocol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/source\/bytesread","title":"var bytesRead: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/source\/applying(boxcipher:operation:key:boxdatasize:)","title":"func applying(boxCipher: BoxCipherFilter.Algorithm, operation: BoxCipherFilter.Operation, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/source\/applying(compression:operation:)","title":"func applying(compression: Algorithm, operation: FilterOperation) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/source\/authenticating(algorithm:key:)","title":"func authenticating(algorithm: HMACFilter.Algorithm, key: SymmetricKey) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/source\/buffering(segmentsize:)","title":"func buffering(segmentSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/source\/buffers(size:)","title":"func buffers(size: Int) -> AsyncBuffers","type":"method"},{"path":"\/documentation\/iostreams\/source\/compressing(algorithm:)","title":"func compressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/source\/decompressing(algorithm:)","title":"func decompressing(algorithm: Algorithm) throws -> Source","type":"method"},{"path":"\/documentation\/iostreams\/source\/filtering(using:)","title":"func filtering(using: Filter) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/source\/hashing(algorithm:)","title":"func hashing(algorithm: HashingFilter.Algorithm) -> (Source, HashingResult)","type":"method"},{"path":"\/documentation\/iostreams\/source\/opening(algorithm:key:boxdatasize:)","title":"func opening(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"},{"path":"\/documentation\/iostreams\/source\/pipe(to:buffersize:)","title":"func pipe(to: Sink, bufferSize: Int) async throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/iostreams\/source\/read(exactly:)-25a89","title":"func read(exactly: Int) async throws -> Data","type":"method"}],"title":"Source Implementations","type":"groupMarker"}],"path":"\/documentation\/iostreams\/source\/read(exactly:)-297d","title":"func read(exactly: Int) async throws -> Data","type":"method"},{"path":"\/documentation\/iostreams\/source\/read(max:)","title":"func read(max: Int) async throws -> Data?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/iostreams\/source\/read(next:)-zcuo","title":"func read(next: Int) async throws -> Data?","type":"method"}],"title":"Source Implementations","type":"groupMarker"}],"path":"\/documentation\/iostreams\/source\/read(next:)-9ukv6","title":"func read(next: Int) async throws -> Data?","type":"method"},{"path":"\/documentation\/iostreams\/source\/sealing(algorithm:key:boxdatasize:)","title":"func sealing(algorithm: BoxCipherFilter.Algorithm, key: SymmetricKey, boxDataSize: Int) -> Source","type":"method"}],"path":"\/documentation\/iostreams\/source","title":"Source","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/stream\/close()","title":"func close() async throws","type":"method"}],"path":"\/documentation\/iostreams\/stream","title":"Stream","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/asyncbuffers\/asynciterator\/next()","title":"func next() async throws -> Data?","type":"method"}],"path":"\/documentation\/iostreams\/asyncbuffers\/asynciterator","title":"AsyncBuffers.AsyncIterator","type":"struct"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/asyncbuffers\/makeasynciterator()","title":"func makeAsyncIterator() -> AsyncBuffers.AsyncIterator","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/iostreams\/asyncbuffers\/element","title":"AsyncBuffers.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/iostreams\/asyncbuffers\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/compactmap(_:)-34txt","title":"func compactMap<ElementOfResult>((Self.Element) async -> ElementOfResult?) -> AsyncCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/compactmap(_:)-3tkiu","title":"func compactMap<ElementOfResult>((Self.Element) async throws -> ElementOfResult?) -> AsyncThrowingCompactMapSequence<Self, ElementOfResult>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/contains(_:)","title":"func contains(Self.Element) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/contains(where:)","title":"func contains(where: (Self.Element) async throws -> Bool) async rethrows -> Bool","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/drop(while:)","title":"func drop(while: (Self.Element) async -> Bool) -> AsyncDropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/dropfirst(_:)","title":"func dropFirst(Int) -> AsyncDropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/filter(_:)","title":"func filter((Self.Element) async -> Bool) -> AsyncFilterSequence<Self>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/first(where:)","title":"func first(where: (Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/flatmap(_:)-27uks","title":"func flatMap<SegmentOfResult>((Self.Element) async throws -> SegmentOfResult) -> AsyncThrowingFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/flatmap(_:)-3ibux","title":"func flatMap<SegmentOfResult>((Self.Element) async -> SegmentOfResult) -> AsyncFlatMapSequence<Self, SegmentOfResult>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/map(_:)-6az7o","title":"func map<Transformed>((Self.Element) async throws -> Transformed) -> AsyncThrowingMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/map(_:)-8bdd3","title":"func map<Transformed>((Self.Element) async -> Transformed) -> AsyncMapSequence<Self, Transformed>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/max(by:)","title":"func max(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/min(by:)","title":"func min(by: (Self.Element, Self.Element) async throws -> Bool) async rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/prefix(_:)","title":"func prefix(Int) -> AsyncPrefixSequence<Self>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/prefix(while:)","title":"func prefix(while: (Self.Element) async -> Bool) rethrows -> AsyncPrefixWhileSequence<Self>","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) async throws -> Result) async rethrows -> Result","type":"method"},{"path":"\/documentation\/iostreams\/asyncbuffers\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) async throws -> Void) async rethrows -> Result","type":"method"}],"path":"\/documentation\/iostreams\/asyncbuffers\/asyncsequence-implementations","title":"AsyncSequence Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/asyncbuffers","title":"AsyncBuffers","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/iostreams\/ioerror\/endofstream","title":"case endOfStream","type":"case"},{"path":"\/documentation\/iostreams\/ioerror\/filterfailure(_:)","title":"case filterFailure(Error)","type":"case"},{"path":"\/documentation\/iostreams\/ioerror\/streamclosed","title":"case streamClosed","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/ioerror\/errordescription-8664f","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/ioerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/iostreams\/ioerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/iostreams\/ioerror\/errordescription-61dgj","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/iostreams\/ioerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/iostreams\/ioerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/iostreams\/ioerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/iostreams\/ioerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/iostreams\/ioerror","title":"IOError","type":"enum"}],"path":"\/documentation\/iostreams","title":"IOStreams","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}